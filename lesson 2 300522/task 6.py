# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö ¬´–¢–æ–≤–∞—Ä—ã¬ª. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫
# –∫–æ—Ä—Ç–µ–∂–µ–π. –ö–∞–∂–¥—ã–π –∫–æ—Ä—Ç–µ–∂ —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–æ–≤–∞—Ä–µ. –í –∫–æ—Ä—Ç–µ–∂–µ
# –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ç–æ –µ—Å—Ç—å
# —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
# –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –°—Ç—Ä—É–∫—Ç—É—Ä—É –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, –∑–∞–ø—Ä–æ—Å–∏–≤ –≤—Å–µ
# –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

# —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ—Ä—Ç–µ–∂–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º
products = []
# –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–æ–ø
stop = False

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analitics = {
    "–Ω–∞–∑–≤–∞–Ω–∏–µ": [],
    "—Ü–µ–Ω–∞": [],
    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": [],
    "–µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è": []
}

print(
    "–°–µ–π—á–∞—Å –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ "
    "\"Q\".")
# —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
product_id = 0

# —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –≤ –æ–¥–Ω–æ–º –∏–∑
# –ø–æ–ª–µ–π "Q"
while not stop:
    if len(products) == 0:
        print("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
    else:
        print("." * 30)
        print("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
    # —à–∞–±–ª–æ–Ω —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ
    # —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    sample = {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "str",
        "—Ü–µ–Ω–∞": "float",
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": "float",
        "–µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è": "str"
    }

    new_product = sample.copy()
    for item in new_product:
        # –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        # –ø–æ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–º –∏–ª–∏ –ø–æ–∫–∞ –æ–Ω –Ω–µ –Ω–∞–ø–∏—à–µ—Ç "–°—Ç–æ–ø"
        while new_product[item] in ["str", "float"]:
            inp = input(f"{item:>18}: ").strip()
            # –æ—Ç—Ä–µ–∑–∞–µ–º —Ç–æ—á–∫–∏ –ø–æ –∫—Ä–∞—è–º
            if inp.startswith("."):
                inp = inp[1:]
            if inp.endswith("."):
                inp = inp[:len(inp) - 1]
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª
            if not inp:
                print(f"{'':>18}‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ \"Q\", "
                      f"—á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
                continue
            if inp.lower() in ["q", "–π", "—Å—Ç–æ–ø", "stop", "cnjg", "—Ñ–ª—é–≥–µ–≥–µ—Ö–∞–π–º–µ–Ω"]:
                stop = True
                print("üèÅ –ó–∞–∫–æ–Ω—á–∏–ª–∏.")
                break
            # –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if new_product[item] == "float":
                # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–æ
                # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
                is_valid_numb = inp.count(",") <= 1 and inp.count(".") <= 1
                if is_valid_numb:
                    # –æ–±—Ö–æ–¥–∏–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á–∏—Å–ª–æ –ª–∏ —ç—Ç–æ
                    for char in inp:
                        # —Å–∏–º–≤–æ–ª —è–≤–ª—è–µ—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π, —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π
                        is_valid_numb = char.isdigit() or char in [".", ","]
                        if not is_valid_numb:
                            break
                if not is_valid_numb:
                    print(f"{'':>18}‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏–ª–∏ \"Q\", —á—Ç–æ–±—ã "
                          f"–≤—ã–π—Ç–∏.")
                    continue
                # –µ—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞ –≤—Å—è–∫–∏–π –º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
                # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤–æ float –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                new_product[item] = float(inp.replace(",", "."))
                analitics[item].append(new_product[item])
            else:
                new_product[item] = inp
                analitics[item].append(new_product[item])
        if stop:
            break
    if not stop:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–∫–∞–∑–∞–ª —Å—Ç–æ–ø, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂
        # —Å —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products.append(tuple([product_id, new_product]))
        product_id += 1
        print("." * 30)
        print("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"{'':>5}–¢–æ–≤–∞—Ä—ã:\n{products}.")
        print(f"{'':>5}–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: \n{analitics}")

if len(products) > 0:
    print("*" * 30)
    print("–í–æ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤ –∏—Ç–æ–≥–µ:")
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã:\n{products}.")
    analitics["–µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"] = list(set(analitics["–µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"]))
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: \n{analitics}")
else:
    print("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.")
